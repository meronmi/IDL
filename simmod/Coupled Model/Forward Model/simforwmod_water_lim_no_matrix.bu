; PROCEDURE COMMENTS +
; NAME: simForwMod_water_lim
; AUTHOR: Michele Meroni
; CONTACT INFO: michele.meroni@gmail.com

; DESCRIPTION:
; Simple vegetation growth model (based on the GRAMI model) coupled with radiative transfer model PROSAIL5b
; to compute FAPAR from LAI (used internally) and simulate MODIS 7 bands reflectances.

; CALLING SEQUENCE:
;       output = simForwMod(JD0, laiDOY0, SLA, eps_max, wlim, cap, half_life, bewm_opt, gamma, c, d, a, b, tJD, globrad, globrad2par, tair, tb, proSailVar, satObsJD, satObsRAA, satObsSZA, satObsVZA)

; INPUTS:
; PARAMETERS are denoted with:
; (k) = fixed in inversion
; (kf) = fixed or free in the time series run (and therefore constant at the seasonal level)
; (f) = free in the seasonal run
; INPUTS are denoted with: (i)

; JD0:          (f) {scalar} JUlian Day of trhe DOY at which the LAI is laiDOY0, it is used to approximate emergence of the crop
; laiDOY0:      (kf) {scalar} LAI value at DOY0, emergence
; SLA:          (kf) {scalar} Specific Leaf Area(m2 g-1)
; eps_max:      (kf) {scalar} maximum Light Use Efficiency (kgDM GJ_PAR-1 = gDM MJ-1)
; wlim:         STRUCTURE for water limitation computation
;               (k) wlim.onoff: 0/1 for deactivating/activating water limitation
;               (i) wlim.tJD: time axis of precipitation variable (it must start before the other variables, tJD[0]-365) (Julian days)
;               (i) wlim.tair: air temperature (°C)
;               (i) wlim.rain: precipitation (mm)
; cap:          (k)  {scalar} cap value for precipitation (rain>cap is set to rain=cap) (mm)
; half_life:    (kf) {scalar}half_life control the stepnees of the decay of weights, it's the time (expressed in GDD units) in which
;                    the weights fall to one half (degree days)
; bewm_opt:     (kf) {scalar}optimal value for the Backward Exponentially Weighted Mean (mm)
; gamma:        (k) {scalar} respiration coefficient (set to 0 if eps_max is optimized), re=gamma*GPP
;               ** Note: gamma has the only effect of maing a distinction between GPP and NPP but it is useless
;               ** if eddy data are not used in the inversion
; c:            parameter controlling the leaf lifespan (J = c + d * GDD, as in Maas, 1993)
;               (f) {scalar} c (DegDays)cts as a base life span
; d:            parameter controlling the leaf lifespan (J = c + d * GDD, as in Maas, 1993)
;               (f) {scalar} d (-) controls the lifespan (J) a function of the degree days at emergence,
;                   e.g., if d if GT 0 it makes the leaves emerging later to live longer
;Partitioning, GRAMI function (LeafPartitioning_on_GDD)
; a:            paremeter controlling partitioning (sim.P1 = Max(1-a*EXP(b*GDD), 0) as in Maas, 1993)
;               (f) {scalar} a (-) controls the magnitude of partitioning
; b:            paremeter controlling partitioning to new leaves (sim.P1 = Max(1-a*EXP(b*GDD), 0) as in Maas, 1993)
;Partitioning, Michele's function (LeafPartitioning_on_GDD2)
; a:            paremeter controlling the length of the period of leaf partitioning (sim.P1 = MAX([1.0 - (GDD/(GDD+EXP(b)*(a-GDD))),0.0]))
;               (f) {scalar} a (-) controls the length
; b:            paremeter controlling the shape of the decay of partitioning, pecial cases:
;               b<0: convex function(U shape)
;               b=0: linear decreasong function
;               b>0: concave function (standard behaviour, in this case it resample the exponential of GRAMI)
;               (f) {scalar} b (-) controls how quickly partitioning is reduced with GDD
; tJD:          (i) {array} time axis of meteo variables (in Julian Day)
; globrad:      (i) {array} Global radiation (GJ ha-1 d-1)
; globrad2par:  (k) {scalar} conversion factor from Global radiation to PAR *
; tair:         (i) {array} Air temperature (°C)
; tb:           (k) {scalar} base temperature to comput degree days (dDD = MAX(Tair-Tb, 0)
; proSailVar:   PROSAIL PARAMETERS {structure}
;               (k) proSailVar.Cab    : chlorophyll content (µg.cm-2) (0-100 ug cm-2)
;               (k) proSailVar.Car    : carotenoid content (µg.cm-2)  (0-25 ug cm-2)
;               (k) proSailVar.Cbrown : brown pigment content (0-1 arbitrary units)
;               (k) proSailVar.Cw     : EWT (cm) - Equivalent water thickness (0-0.05 cm)
;               (k) proSailVar.Cm     : LMA (g.cm-2) - leaf mass per unit leaf area (0-0.02 g cm-2)
;               (k) proSailVar.Ns     : N structure coefficient (1-3 dimensionless)
;               (k) proSailVar.lidf_a : LIDFa LIDF parameter a, which controls the average leaf slope
;               (k) proSailVar.lidf_b : LIDFb LIDF parameter b, which controls the distribution's bimodality
;               (f) proSailVar.lai    : leaf area index
;               (k) proSailVar.hspot  : hot spot parameter
;               (i) proSailVar.tts    : solar zenith angle (°)
;               (i) proSailVar.tto    : observer zenith angle (°)
;               (i) proSailVar.psi    : azimuth (°)
;               (i) proSailVar.rsoil  : {array} spectral soil reflectance (0-1), extracted from the 1st NDVI percentile oh hystorical distribution
; satObsJD:     (i) {array} Julian Day for which a satellite observation is available
; satObsRAA:    (i) {array} Relative Azimuth Angle (between sun and obs) (-180, +180°)
; satObsSZA:    (i) {array} Solar Zenith Angle (0, 90°)
; satObsVZA:    (i) {array} View Zenith Angle (0, 90°)
;
; OUTPUTS:
; Structure res
; res.gpp
; res.lai
; res.ModRef (array 7 columns, n raws)
;
; OPTIONAL OUTPUTS:
; OPTIONAL INPUT KEYWORD(S):
; NOTES:
;* on global radiation:
;   ecmwf glob rad is KJ m-2
;   eddy glob rad  is MJ m-2 (even if in the xls file is W m-2)
; METHOD:
; EXAMPLE:
; MODIFICATION HISTORY:
; 14 July 2014: Cleaning
; 28 Aug 2014: Sumlation is started at the the first day of the time array (tJD[0]) instead
; of JD0. Therefore, LAI = 0 until JD0 and the spectral reflecantances are those of the background.
; (previous version save as simforwmodV1.pro)
; 29 Sep 2014: water limitation (eps_s) added
; CODING NOTES:
;


FUNCTION simForwMod_water_lim, JD0, laiDOY0, SLA, eps_max, wlim, cap, half_life, bewm_opt, gamma, c, d, a, b, tJD, globrad, globrad2par, tair, tb, proSailVar, satObsJD, satObsRAA, satObsSZA, satObsVZA
  COMMON wlim, wLimParFixed, bewm, bewm_et0

  !EXCEPT=2
  ; Similar to GRAMI.
  ;
  ; Input variable are provided at daily time step, the simulation is conducted from DOY0 to DOY0+N_ELEMENTS(globrad)

  ;DA FARE completamante:

  ;- partitioning HI
  ;- leaf life span, it should take into account temperature and water stress

  ;DIFFERENCES WITH GRAMI:
  ; - GDD is compute from emergence
  ; - GDD are used only in the leaf lifespan, not in phenology determination
  ; - DOY0 is determined in the inversion of the model against RS observation
  ; - water limitation
  ;- PROSAIL is used to compute FAPAR (see details in d:\Users\meronmi\Documents\IDL\simmod\Coupled Model\PROSAIL\DOCS\ MM modifications to prosail.docx



  ;TIC
  ;TIC, /PROFILER

  ; Initialized required common blocks
  @cb_prospect_last_parameters.comm      ;last parameters parametrs
  lCab=-999 & lCar=-999 & lCbrown=-999 & lCw=-999 & lCm =-999 & lNs =-999
  @cb_prosail_data.comm                  ;skyl
  skyl = dataSkyle()
  data = dataSpec_P5B()
  @cb_ladgen.comm                        ;ladgen input/output
  llidf_a = -999 & llidf_b=-999 & lidf=-999


  ; Load (once and for all) specific tables repeatedly used to process PROSAIL outputs
  ; spectral weights to compute a single FAPAR value from spectral diffuse canopy absorption
  wpar = dataWpar()
  ; MODIS Terra relative spectral response functions for the first 7 bands (to get MODIS reflectances from spectral ref)
  ;rsrArray = dataRSR_MODIST_7b()
  rsrArray = dataRSR_MODIST_7b()
  ; MODIS central wavelengths for the first 7 bands
  cwl = datacentwl_MODIST_7b()
  ; prosail simulated wavlengths
  wl = INDGEN(2101) + 400


  ; Initialize varaiables
  ; number of days to be simulated
  nDays = N_ELEMENTS(tJD)
  ; - returned variables
  sim = { gdd:            FLTARR(nDays)*0.0, $              ;cumulated growing dergree days
    fa:             FLTARR(nDays)*0.0, $              ;fapar
    lai:            FLTARR(nDays)*0.0, $              ;lai
    dlai:           FLTARR(nDays)*0.0 , $             ;daily increment in LAI
    dlai_senescent: FLTARR(nDays)*0.0 , $             ;daily reduction in LAI
    gpp:            FLTARR(nDays)*0.0, $              ;daily GPP value
    cgpp:           FLTARR(nDays)*0.0, $              ;cumulative GPP value
    cnpp:           FLTARR(nDays)*0.0, $              ;cumulative NPP value
    P1:             FLTARR(nDays)*0.0, $              ;patitioning into leaves
    eps_s:             FLTARR(nDays)*0.0, $              ;eps stress
    ModRef:         FLTARR(7, nDays)*!VALUES.F_NAN}   ;simulated MODIS reflectances

  ; - working variables
  J = FLTARR(nDays)*0                                        ;leaf lifespan for leaf emerged each day in degree days
  ddLeafAge = FLTARR(nDays)*0.0                              ;cumulative degree days from each day up to t, use for senescence
  aliveLeaf = BYTARR(nDays) * 0 + 1                          ;aliveLeaf[t] = 1 if the leaves emerged at t are still alive, 0 if they were removed already
  dgpp = FLTARR(nDays)*!VALUES.F_NAN     & dnpp = FLTARR(nDays)*!VALUES.F_NAN        ;daily increments of GPP and NPP

  ; Convert Global radiation to PAR
  par = globrad2par * globrad                   ;(GJ ha-1 d-1)

  ; Time domain
  indTJD0 = WHERE(tJD EQ JD0)                   ;index of the day at which LAI is set to laiDOY0, it is LAI = 0 before
  indTJD0 = indTJD0[0]

  ;Make sure that SLA and prosail Cm are consistent
  proSailVar.cm = 1.d/(SLA*100.d*100.d)

  laiDOY0removed = 0                            ;flag used to avoid checking if laiDOY0 is removed once it is removed

  ;water limitation
  IF (wlim.eps_onoff EQ 1)THEN BEGIN
    ; exp decay weighted average of p
    ;bewm = BackwardExpWeightedMean(wlim.tJD, wlim.tair, wlim.rain, half_life, cap)
    ;if bewm parameters are not free in the inversion do not recomputed at ecah iteration,
    ;use the one stored in the common block
    IF (wLimParFixed EQ 0) THEN BEGIN
      bewm = BackwardExpWeightedMean_FAST(wlim.tJD, wlim.tair, wlim.rain, half_life, cap)
      ;bewm et0 should be computed here if adopted (pass the data, remove stop)
      ;    et0 = extract_timerange(ecmwf_data.JD, sJD + DOYoffset, eJD, ecmwf_data.et0)
      ;    bewm_et0 = BackwardExpWeightedMean_FAST(wlim.tJD, wlim.tair, et0, fg[11], fg[10])
      STOP
    ENDIF
    ; now extract relevant data (for the period of analysis only)
    bewmTmp = extract_timerange(wlim.tJD, tJD[0], tJD[N_ELEMENTS(tJD)-1], bewm)

    sim.eps_s = bewmTmp / DOUBLE(bewm_opt)
    ind = WHERE(sim.eps_s GT 1, count)
    IF (count GT 0) THEN sim.eps_s[ind] = 1.0

    ;TEST with ratio bewm_rain/bewn_et0 +
    bewm_et0_tmp = extract_timerange(wlim.tJD, tJD[0], tJD[N_ELEMENTS(tJD)-1], bewm_et0)
    ;CASA Approach for water scaler (Maselli et al, 2009;Field et al., 1995; Potter et al., 1993)
    sim.eps_s [*] = 0.5 + bewmTmp / DOUBLE(bewm_et0_tmp)
    ;sim.eps_s [*] = bewmTmp / DOUBLE(bewm_et0_tmp)
    ind = WHERE(sim.eps_s GT 1, count)
    IF (count GT 0) THEN sim.eps_s[ind] = 1.0
    ;TEST with ratio bewm_rain/bewn_et0 -

    ;TEST with bewm LTA +
    ;  bewm_ltaTmp = extract_timerange(wlim.tJD, tJD[0], tJD[N_ELEMENTS(tJD)-1], bewm_lta)
    ;  ind = WHERE(bewm_ltaTmp NE 0.0)
    ;  sim.eps_s = 1
    ;  sim.eps_s[ind] = bewmTmp[ind] / bewm_ltaTmp[ind]
    ;  ind = WHERE(sim.eps_s GT 1, count)
    ;  IF (count GT 0) THEN sim.eps_s[ind] = 1.0
    ;TEST with bewm LTA -
  ENDIF ELSE BEGIN
    ;- eps stress deactivated
    sim.eps_s = FLTARR(N_ELEMENTS(tJD))*0.0+1.0
  ENDELSE

  FOR t=0, nDays-2 DO BEGIN
    ; note that DOY = tJD[0] + t
    ; Until JD0 (subscript indTJD0) only perform spectral simulation with lai = 0
    ; From JD0 on, start the growth development simulations

    IF (t GE indTJD0) THEN BEGIN
      ; update the "age" (in dd) of each emerged leaf in degree days
      ; by adding today dd to each of the past days when there were leaves
      ddLeafAge[indTJD0:t] = ddLeafAge[indTJD0:t] + MAX([Tair[t]-Tb, 0.0])
      ; update growing degree days
      sim.gdd[t+1] = sim.gdd[t] + MAX([Tair[t]-Tb, 0.0])
      ; Lifespan of the new emerged leaf
      J[t] = c + d * sim.gdd[t]

      ; the model normally compute GPP and new LAI for the current day t and update
      ; fapar and reflectances for the next day (t+1). However,
      ; if current t is the day of leaves emergence, fapar and reflectances must be computed
      ; from scratch
      IF (t EQ indTJD0) THEN BEGIN
        sim.lai[t] = laiDOY0
        proSailVar.lai = sim.lai[t]
        ;use actual illumination and view geometry if there is a MODIS observation
        ;if not use closest illum last geometry here (and the last later)
        !NULL = MIN(ABS(satObsJD-tJD[t]), ind, /NAN)
        proSailVar.tts = satObsSZA[ind]
        proSailVar.tto = satObsVZA[ind]
        proSailVar.psi = satObsRAA[ind]
PRO4SAIL5B,proSailVar.Cab,proSailVar.Car,proSailVar.Cbrown,proSailVar.Cw,proSailVar.Cm, $
  proSailVar.Ns,proSailVar.lidf_a,proSailVar.lidf_b,proSailVar.lai,proSailVar.hspot, $
  proSailVar.tts,proSailVar.tto,proSailVar.psi,proSailVar.rsoil,resh,resv,absh
  ;resample it
  ;sim.ModRef[*,t] = rsrArray ## resv
  sim.ModRef[*,t] = resample2MODIS7b(wl, resv, rsrArray)
  ;if (N_ELEMENTS(wpar) NE N_ELEMENTS(absh[0:300])) THEN STOP
  sim.fa[t] = TOTAL(wpar*absh[0:300])
ENDIF
;compute GPP and NPP for today
dgpp[t] = eps_max * sim.eps_s[t] * (sim.fa[t]*par[t])          ;(kg ha-1 d-1)
sim.gpp[t] = dgpp[t]
dnpp[t] = dgpp[t] * (1.0-gamma)                         ;(kg ha-1 d-1)
;and update cumulated values
sim.cgpp[t+1] = sim.cgpp[t] + dgpp[t]
sim.cnpp[t+1] = sim.cnpp[t] + dnpp[t]
;partitioning
sim.P1[t] = LeafPartitioning_on_GDD2(sim.gdd[t], a, b)

; LAI and fAPAR evolution
;new lai
sim.dlai[t] = sim.P1[t] * dnpp[t] / (100.0*100.0) * SLA * 1000.0 ;(m2 m-2)

; Senescent lai
;find out the past days at which the leaves has reached the lifespan and remove them,
;2 conditions for removing LAI:
; - leaves for those days were not removed already,
; - the age of those days has exceeded its lifespan J
indSen = WHERE((aliveLeaf EQ 1) AND (ddLeafAge GT J), countSen)
IF (countSen GT 0) THEN BEGIN
  ;remove the LAI accumulated during those days
  sim.dlai_senescent[t] = TOTAL(sim.dlai[indSen])
  ;if also the first day of growth LAI has to be removed, remove laiDOY0 as well
  IF (laiDOY0removed EQ 0) THEN BEGIN
    ind = WHERE(indSen EQ indTJD0, count)
    IF (count NE 0) THEN BEGIN
      sim.dlai_senescent[t] = sim.dlai_senescent[t] +  laiDOY0
      laiDOY0removed = 1
    ENDIF
  ENDIF
  ;set the leaves to dead
  aliveLeaf[indSen] = 0
ENDIF

;Update LAI and FAPAR with net LAI increase
sim.lai[t+1]=sim.lai[t] + sim.dlai[t] - sim.dlai_senescent[t]
IF (sim.lai[t+1] GT 20) THEN STOP
IF (sim.lai[t+1] LT 0) THEN BEGIN
  ;a small negative value is acceptable as the LAI may be close to zero because of machine precision, e.g.
  IF (sim.lai[t+1] LT -0.0001) THEN STOP ELSE sim.lai[t+1] = 0.0
ENDIF
; conversion of lai into fapar
proSailVar.lai = sim.lai[t]
;use actual illumination and view geometry if there is a MODIS observation
;if not use closest illum last geometry here (and the last later)
!NULL = MIN(ABS(satObsJD-tJD[t+1]), ind, /NAN)
proSailVar.tts = satObsSZA[ind]
proSailVar.tto = satObsVZA[ind]
proSailVar.psi = satObsRAA[ind]
IF (FINITE(proSailVar.tts) NE 1) THEN STOP
PRO4SAIL5B,proSailVar.Cab,proSailVar.Car,proSailVar.Cbrown,proSailVar.Cw,proSailVar.Cm, $
  proSailVar.Ns,proSailVar.lidf_a,proSailVar.lidf_b,proSailVar.lai,proSailVar.hspot, $
  proSailVar.tts,proSailVar.tto,proSailVar.psi,proSailVar.rsoil,resh,resv,absh
  ;resample it
  ;sim.ModRef[*,t+1] = rsrArray ## resv
  sim.ModRef[*,t+1] = resample2MODIS7b(wl, resv, rsrArray)
  sim.fa[t+1] = TOTAL(wpar*absh[0:300])
  ;yield
  ;yield[t]=alpha_g[t]*sim.cnpp[t]    ;(kgDM ha-1 d-1)
ENDIF ELSE BEGIN
  ; The section before was execute only from JD0.
  ; This section is executed before JD0, note that all variables are set to 0 (LAI, GPP, etc.) at their initialization.
  ; The only variable that must be computed is reflectance, that, in the absence of vegetation, is
  ; the reflectance of the soil. In addition this reflectance, being considered isotropic, does not change
  ; with observation geoemtry. Therefore is compute once and for all at the first request.
  proSailVar.lai = sim.lai[t]
  ;use standard illumination conditions (it doesn't matter here)
  proSailVar.tts = 30.0
  proSailVar.tto = 0.0
  proSailVar.psi = 0.0
  ;reample it
  IF (t EQ 0) THEN modRef0LAI = resample2MODIS7b(wl, proSailVar.rsoil, rsrArray);modRef0LAI = rsrArray ## proSailVar.rsoil;
  ;    PRO4SAIL5B,proSailVar.Cab,proSailVar.Car,proSailVar.Cbrown,proSailVar.Cw,proSailVar.Cm, $
  ;               proSailVar.Ns,proSailVar.lidf_a,proSailVar.lidf_b,proSailVar.lai,proSailVar.hspot, $
  ;               proSailVar.tts,proSailVar.tto,proSailVar.psi,proSailVar.rsoil,resh,resv,absh;
  ;sim.ModRef[*,t+1] = resample2MODIS7b(wl, resv, rsrArray)
  sim.ModRef[*,t] = modRef0LAI
ENDELSE
ENDFOR
;TOC
;TOC, REPORT=rep_profiler
;PROFILER, /REPORT

RETURN, sim
END