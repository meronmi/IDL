; PROCEDURE COMMENTS +
; NAME: simForwModV1
; AUTHOR: Michele Meroni
; CONTACT INFO: michele.meroni@gmail.com

; DESCRIPTION:
; Simple vegetation growth model (based on the GRAMI model) coupled with radiative transfer model PROSAIL5b
; to compute FAPAR from LAI (used internally) and simulate MODIS 7 bands reflectances. 

; CALLING SEQUENCE:
;       output = simForwMod(JD0, laiDOY0, SLA, eps_max, gamma, c, d, a, b, tJD, globrad, globrad2par, tair, tb, proSailVar, satObsJD, satObsRAA, satObsSZA, satObsVZA)

; INPUTS:
; PARAMETERS are denoted with:
; (k) = fixed in inversion
; (kf) = fixed or free in the time series run (and therefore constant at the seasonal level)
; (f) = free in the seasonal run
; INPUTS are denoted with: (i)
     
; JD0:          (f) {scalar} JUlian Day of trhe DOY at which the LAI is laiDOY0, it is used to approximate emergence of the crop
; laiDOY0:      (kf) {scalar} LAI value at DOY0, emergence
; SLA:          (kf) {scalar} Specific Leaf Area(m2 g-1)
; eps_max:      (kf) {scalar} maximum Light Use Efficiency (kgDM GJ_PAR-1 = gDM MJ-1) 
; gamma:        (k) {scalar} respiration coefficient (set to 0 if eps_max is optimized), re=gamma*GPP
;               ** Note: gamma has the only effect of maing a distinction between GPP and NPP but it is useless
;               ** if eddy data are not used in the inversion
; c:            parameter controlling the leaf lifespan (J = c + d * GDD, as in Maas, 1993)
;               (f) {scalar} c (DegDays)cts as a base life span
; d:            parameter controlling the leaf lifespan (J = c + d * GDD, as in Maas, 1993)
;               (f) {scalar} d (-) controls the lifespan (J) a function of the degree days at emergence, 
;                   e.g., if d if GT 0 it makes the leaves emerging later to live longer             
; a:            paremeter controlling partitioning (sim.P1 = Max(1-a*EXP(b*GDD), 0) as in Maas, 1993)
;               (f) {scalar} a (-) controls the magnitude of partitioning
; b:            paremeter controlling partitioning to new leaves (sim.P1 = Max(1-a*EXP(b*GDD), 0) as in Maas, 1993)
;               (f) {scalar} b (-) controls how quickly partitioning is reduced with GDD
; tJD:          (i) {array} time axis of meteo variables (in Julian Day)              
; globrad:      (i) {array} Global radiation (GJ ha-1 d-1)
; globrad2par:  (k) {scalar} conversion factor from Global radiation to PAR *
; tair:         (i) {array} Air temperature (°C)
; tb:           (k) {scalar} base temperature to comput degree days (dDD = MAX(Tair-Tb, 0)
; proSailVar:   PROSAIL PARAMETERS {structure}
;               (k) proSailVar.Cab    : chlorophyll content (µg.cm-2) (0-100 ug cm-2)
;               (k) proSailVar.Car    : carotenoid content (µg.cm-2)  (0-25 ug cm-2)
;               (k) proSailVar.Cbrown : brown pigment content (0-1 arbitrary units)
;               (k) proSailVar.Cw     : EWT (cm) - Equivalent water thickness (0-0.05 cm)
;               (k) proSailVar.Cm     : LMA (g.cm-2) - leaf mass per unit leaf area (0-0.02 g cm-2)
;               (k) proSailVar.Ns     : N structure coefficient (1-3 dimensionless)
;               (k) proSailVar.lidf_a : LIDFa LIDF parameter a, which controls the average leaf slope
;               (k) proSailVar.lidf_b : LIDFb LIDF parameter b, which controls the distribution's bimodality
;               (f) proSailVar.lai    : leaf area index
;               (k) proSailVar.hspot  : hot spot parameter
;               (i) proSailVar.tts    : solar zenith angle (°)
;               (i) proSailVar.tto    : observer zenith angle (°)
;               (i) proSailVar.psi    : azimuth (°)
;               (i) proSailVar.rsoil  : {array} spectral soil reflectance (0-1), extracted from the 1st NDVI percentile oh hystorical distribution
; satObsJD:     (i) {array} Julian Day for which a satellite observation is available
; satObsRAA:    (i) {array} Relative Azimuth Angle (between sun and obs) (-180, +180°)
; satObsSZA:    (i) {array} Solar Zenith Angle (0, 90°)
; satObsVZA:    (i) {array} View Zenith Angle (0, 90°)
;
; OUTPUTS: 
; Structure res
; res.gpp
; res.lai
; res.ModRef (array 7 columns, n raws)
; 
; OPTIONAL OUTPUTS:
; OPTIONAL INPUT KEYWORD(S):
; NOTES:
;* on global radiation:
;   ecmwf glob rad is KJ m-2  
;   eddy glob rad  is MJ m-2 (even if in the xls file is W m-2)
; METHOD:
; EXAMPLE:
; MODIFICATION HISTORY: 
; Cleaned on the 14 July 2014
; CODING NOTES:
;


FUNCTION simForwModV1, JD0, laiDOY0, SLA, eps_max, gamma, c, d, a, b, tJD, globrad, globrad2par, tair, tb, proSailVar, satObsJD, satObsRAA, satObsSZA, satObsVZA
!EXCEPT=2
; Similar to GRAMI. It simulates:
; ..
; as a function of the parameters:
; ..
; and input variables:
; - globrad
; - Tair
;
; Input variable are provided at daily time step, the simulation is conducted from DOY0 to DOY0+N_ELEMENTS(globrad)

;DA FARE completamante:
;- eps stress
eps_s=1.0                                 ;normalized eps for stress
;- partitioning HI
;- leaf life span, it should take into account temperature and water stress

;DIFFERENCES WITH GRAMI:
; - GDD is compute from emergence
; - GDD are used only in the leaf lifespan, not in phenology determination
; - DOY0 is determined in the inversion of the model against RS observation
;- PROSAIL is used to compute FAPAR (see details in d:\Users\meronmi\Documents\IDL\simmod\Coupled Model\PROSAIL\DOCS\ MM modifications to prosail.docx



;TIC
;TIC, /PROFILER
;Initialized required common blocks
@cb_prospect_last_parameters.comm      ;last parameters parametrs
lCab=-999 & lCar=-999 & lCbrown=-999 & lCw=-999 & lCm =-999 & lNs =-999
@cb_prosail_data.comm                  ;skyl
skyl = dataSkyle()
data = dataSpec_P5B()
@cb_ladgen.comm                        ;ladgen input/output
llidf_a = -999 & lidf_b=-999 & lidf=-999


;Load (once and for all) specific tables repeatedly used to process PROSAIL outputs
; spectral weights to compute a single FAPAR value from spectral diffuse canopy absorption
wpar = dataWpar()
; MODIS Terra relatiove spectral response functions for the first 7 bands (to get MODIS reflectances from spectral ref) 
rsrArray = dataRSR_MODIST_7b()
; MODIS central wavelengths for the first 7 bands
cwl = datacentwl_MODIST_7b()
;prosail simulated wavlengths
wl = INDGEN(2101) + 400

;Definition of time domain
nDays = N_ELEMENTS(tJD)                              ; number of days to be simulated
nElem = nDays                                        

; Initialize varaiables
; - returned variables
sim = { gdd:            FLTARR(nElem)*!VALUES.F_NAN, $       ;cumulated growing dergree days
        fa:             FLTARR(nElem)*!VALUES.F_NAN , $       ;fapar
        lai:            FLTARR(nElem)*!VALUES.F_NAN , $      ;lai
        dlai:           FLTARR(nElem)*0.0 , $               ;daily increment in LAI
        dlai_senescent: FLTARR(nElem)*0.0 , $     ;daily reduction in LAI
        gpp:            FLTARR(nDays)*0.0, $              ;daily GPP value
        cgpp:           FLTARR(nElem)*!VALUES.F_NAN, $      ;cumulative GPP value
        cnpp:           FLTARR(nElem)*!VALUES.F_NAN, $      ;cumulative NPP value
        P1:             FLTARR(nElem)*0.0, $                  ;patitioning into leaves
        ModRef:         FLTARR(7, nElem)*!VALUES.F_NAN}   ;simulated MODIS reflectances

; - working variables
J = FLTARR(nElem)*0                                        ;leaf lifespan for leaf emerged each day in degree days
ddLeafAge = FLTARR(nElem)*0.0                              ;cumulative degree days from each day up to t, use for senescence
aliveLeaf = BYTARR(nElem) * 0 + 1                          ;aliveLeaf[t] = 1 if the leaves emerged at t are still alive, 0 if they were removed already 
dgpp = FLTARR(nElem)*!VALUES.F_NAN     & dnpp = FLTARR(nElem)*!VALUES.F_NAN        ;daily increments of GPP and NPP 

;Convert Global radiation to PAR
par = globrad2par * globrad                    ;(GJ ha-1 d-1)

;Time domain
indT0 = WHERE(tJD EQ JD0)
indT0 = indT0[0]

;Initialize variable at DOY0, step 0
sim.lai[indT0] = 0.0 +laiDOY0                   ;LAI
sim.gdd[indT0] = 0

proSailVar.lai = sim.lai[indT0]
;use actual illumination and view geometry if there is a MODIS observation 
;if not use closest illum last geometry here (and the last later)
!NULL = MIN(ABS(satObsJD-JD0), ind, /NAN)
proSailVar.tts = satObsSZA[ind]
proSailVar.tto = satObsVZA[ind]
proSailVar.psi = satObsRAA[ind]
PRO4SAIL5B,proSailVar.Cab,proSailVar.Car,proSailVar.Cbrown,proSailVar.Cw,proSailVar.Cm, $
           proSailVar.Ns,proSailVar.lidf_a,proSailVar.lidf_b,proSailVar.lai,proSailVar.hspot, $
           proSailVar.tts,proSailVar.tto,proSailVar.psi,proSailVar.rsoil,resh,resv,absh;
sim.ModRef[*,indT0] = resample2MODIS7b(wl, resv, rsrArray)
if (N_ELEMENTS(wpar) NE N_ELEMENTS(absh[0:300])) THEN STOP
sim.fa[indT0] = TOTAL(wpar*absh[0:300])
 
sim.cgpp[indT0] = 0
sim.cnpp[indT0] = 0

FOR t=indT0, nDays-2 DO BEGIN
  ;note that DOY = DOY0 + t or doys[t]
 
  ;update growing degree days
  sim.gdd[t+1] = sim.gdd[t] + MAX([Tair[t]-Tb, 0.0])
  ;PRINT, 'GDD at t = ' +STRTRIM(t+1,2) + ' : ' + STRTRIM(sim.gdd[t+1],2)
  ;update the "age" of each emerged leaf in degree days
  ;that is cumulate dd for each of the past days
  ddLeafAge[indT0:t] = ddLeafAge[indT0:t] + MAX([Tair[t]-Tb, 0.0])
  ;Lifespan of the new emerged leaf
  J[t] = c + d * sim.gdd[t]
  
  ;compute GPP and NPP for today
  dgpp[t] = eps_max * eps_s * (sim.fa[t]*par[t])          ;(kg ha-1 d-1)
  sim.gpp[t] = dgpp[t]
  dnpp[t] = dgpp[t] * (1.0-gamma)                     ;(kg ha-1 d-1)
  ;and update cumulated values
;  sim.cgpp[t+1] = sim.cgpp[indT0] + dgpp[t]
;  sim.cnpp[t+1] = sim.cnpp[indT0] + dnpp[t]   ;WHY indT0????
  sim.cgpp[t+1] = sim.cgpp[t] + dgpp[t]
  sim.cnpp[t+1] = sim.cnpp[t] + dnpp[t] 
  ;partitioning
  sim.P1[t] = LeafPartitioning_on_GDD(sim.gdd[t], a, b)
  
  ;LAI and fAPAR evolution
  ;new lai
  sim.dlai[t] = sim.P1[t] * dnpp[t] / (100.0*100.0) * SLA * 1000.0 ;(m2 m-2)
  
  ;Senescent lai 
  ;find out the past days at which the leaves has reached the lifespan
  ;2 consitions: leaves for those days were not removed already, the age of those days has exceeded the lifespan of those days 
  indSen = WHERE((aliveLeaf EQ 1) AND (ddLeafAge GT J), countSen)
  IF (countSen GT 0) THEN BEGIN
    ;set the leaves to dead
    aliveLeaf[indSen] = 0
    ;remove the LAI accumulated during those days
    sim.dlai_senescent[t] = TOTAL(sim.dlai[indSen])
    ;if the LAI formed on the first day of simulation is removed, remove laiDOY0 as well
    ;suprresed as it gives a peak of lear mortality
    ;IF (indSen[0] EQ 0) THEN sim.dlai_senescent[t] = sim.dlai_senescent[t] + laiDOY0
  ENDIF

  ;Update LAI and FAPAR with net LAI increase
  sim.lai[t+1]=sim.lai[t] + sim.dlai[t] - sim.dlai_senescent[t]
  IF (sim.lai[t+1] GT 20) THEN STOP
  IF (sim.lai[t+1] LT 0) THEN BEGIN
    ;a small negative value is used as the LAI may be close to zero because of machine precision, e.g.
    IF (sim.lai[t+1] LT -0.0001) THEN STOP ELSE sim.lai[t+1] = 0.0
  ENDIF
  ;conversion of lai into fapar
  proSailVar.lai = sim.lai[t]
  
  ;use actual illumination and view geometry if there is a MODIS observation
  ;if not use closest illum last geometry here (and the last later)
  !NULL = MIN(ABS(satObsJD-tJD[t+1]), ind, /NAN)
  proSailVar.tts = satObsSZA[ind]
  proSailVar.tto = satObsVZA[ind]
  proSailVar.psi = satObsRAA[ind]
  ;IF (tJD[t+1] EQ 2.45434e+006) THEN STOP
  PRO4SAIL5B,proSailVar.Cab,proSailVar.Car,proSailVar.Cbrown,proSailVar.Cw,proSailVar.Cm, $
             proSailVar.Ns,proSailVar.lidf_a,proSailVar.lidf_b,proSailVar.lai,proSailVar.hspot, $
             proSailVar.tts,proSailVar.tto,proSailVar.psi,proSailVar.rsoil,resh,resv,absh;
  
  sim.ModRef[*,t+1] = resample2MODIS7b(wl, resv, rsrArray)
  
  sim.fa[t+1] = TOTAL(wpar*absh[0:300])
  ;yield
  ;yield[t]=alpha_g[t]*sim.cnpp[t]    ;(kgDM ha-1 d-1)
  
ENDFOR
;TOC
;TOC, REPORT=rep_profiler
;PROFILER, /REPORT

RETURN, sim
END